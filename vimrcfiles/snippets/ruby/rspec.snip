# rspec#{{{
# basic#{{{
snippet des
alias   describe
abbr    describe do ... end
  describe ${1} do
      ${2}
  end

snippet desc
abbr    describe `class` do ... end
  describe ${1:`substitute(substitute(vim_snippets#Filename(), '_spec$', '', ''), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
    ${0}
  end

snippet descm
abbr    describe #method do ... end
  describe '${1:#method}' do
    ${0:pending 'Not implemented'}
  end

snippet cont
alias   context
abbr    context do ... end
  context '${1:message}' do
    ${0}
  end

snippet bef
alias   before
abbr    before do ... end
  before :${1:each} do
    ${0}
  end

snippet aft
alias   after
abbr    after do ... end
  after :${1:each} do
    ${0}
  end

snippet let
alias   let
abbr    let() { ... }
  let(:${1:object}) { ${0} }

snippet let!
alias   let!
abbr    let!() { ... }
  let!(:${1:object}) { ${0} }

snippet subj
alias   subject
abbr    subject { ... }
  subject { ${0} }

snippet s.
alias   subject.
abbr    subject.#method
  subject.${0:method}

snippet spec
alias   specify
abbr    specify { subject. }
  specify { subject.${0} }

snippet exp
alias   expect
abbr    expect().to
  expect(${1:object}).to ${0}

snippet expb
alias   expect
abbr    expect( {...} ).to
  expect { ${1:object} }.to ${0}

snippet experr
abbr    expect {...}.to raise_error
  expect { ${1:object} }.to raise_error ${2:StandardError}, /${0:message_regex}/

snippet shared
alias   shared_examples
  shared_examples ${0:'shared examples name'}

snippet ibl
alias   it_behaves_like
  it_behaves_like ${0:'shared examples name'}

snippet it
abbr    it do ... end
  it '${1:spec_name}' do
    ${0}
  end

snippet its
abbr    its { shouid ... }
  its(:${1:method}) { should ${0} }

snippet is
abbr    it { shouid ... }
  it { should ${0} }

snippet isn
abbr    it { shouid_not ... }
  it { should_not ${0} }

snippet iexp
abbr    it { expect() ... }
  it { expect(${1:object}).${2} ${0} }

snippet iexpb
abbr    it { expect {...}  ... }
  it { expect { ${1:object} }.${2} ${0} }

snippet iiexp
abbr    it { is_expected.to  ... }
  it { is_expected.to ${0} }

snippet iiexpn
abbr    it { is_expected.not_to  ... }
  it { is_expected.not_to ${0} }

snippet agg
abbr    aggregate_failures do ... end
  aggregate_failures '${1:message}' do
    ${0}
  end
